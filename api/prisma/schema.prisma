generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum AccessLevel {
  self
  other
}

enum DomainStatus {
  pending
  verified
  failed
}

model User {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String      @unique
  isEmailVerified   Boolean     @map("is_email_verified") @default(false)
  accessLevel       AccessLevel @map("access_level") @default(self)
  password          String
  phone             String?
  isPhoneVerified   Boolean     @map("is_phone_verified") @default(false)
  createdAt         DateTime    @map("created_at") @default(now())
  updatedAt         DateTime    @map("updated_at") @updatedAt
  deletedAt         DateTime?   @map("deleted_at")

  sessions Session[]
  securityCodes SecurityCode[]
  domains Domain[]
  files File[]

  @@map("users")
}

model Session {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  userId            String      @map("user_id") @db.ObjectId
  token             String
  description       String?
  permissions       String[]
  expiresAt         DateTime?   @map("expires_at")
  createdAt         DateTime    @map("created_at") @default(now())
  updatedAt         DateTime    @map("updated_at") @updatedAt
  deletedAt         DateTime?   @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model SecurityCode {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  userId            String      @map("user_id") @db.ObjectId
  code              String
  expiresAt         DateTime    @map("expires_at")
  createdAt         DateTime    @map("created_at") @default(now())
  updatedAt         DateTime    @map("updated_at") @updatedAt
  deletedAt         DateTime?   @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  @@map("security_codes")
}

model Domain {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  status            DomainStatus @map("status") @default(pending)
  userId            String      @map("user_id") @db.ObjectId
  createdAt         DateTime    @map("created_at") @default(now())
  updatedAt         DateTime    @map("updated_at") @updatedAt
  deletedAt         DateTime?   @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  dnsRecords DNSRecord[]

  @@map("domains")
}

model DNSRecord {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  domainId          String      @map("domain_id") @db.ObjectId
  type              String
  name              String
  value             String
  ttl               Int
  priority          Int?
  createdAt         DateTime    @map("created_at") @default(now())
  updatedAt         DateTime    @map("updated_at") @updatedAt
  deletedAt         DateTime?   @map("deleted_at")

  domain Domain @relation(fields: [domainId], references: [id])

  @@map("dns_records")
}

model File {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  originalName      String      @map("original_name")
  key               String
  hash              String
  mimeType          String      @map("mime_type")
  encoding          String
  size              Int
  userId            String      @map("user_id") @db.ObjectId
  createdAt         DateTime    @map("created_at") @default(now())
  updatedAt         DateTime    @map("updated_at") @updatedAt
  deletedAt         DateTime?   @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  @@map("files")
}